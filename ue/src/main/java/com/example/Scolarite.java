package com.example;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceUnit;
import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;

@RequestScoped
public class Scolarite {
    @PersistenceUnit
    EntityManager entityManager;

    @Transactional
    public List<UE> getUEs()
    {
        List<UE> result = entityManager.createQuery("select object(u) from UE u").getResultList();
        for (int i = 0; i < result.size(); i++)
        {
            result.get(i).enseignants = entityManager.createQuery("select u.enseignants from UE u where u.id = :id").setParameter("id", result.get(i).id).getResultList();
        }
        return result;
    }

    @Transactional
    public UE getUE(Long id)
    {
        return (UE) entityManager.createQuery("select object(u) from UE u where u.id = :id")
                .setParameter("id", id).getSingleResult();
    }

    @Transactional
    public void updateSemestre(Long id, Long semestre)
    {
        entityManager.createNativeQuery("update UE u set u.semestre = :semestre where u.id = :id")
                .setParameter("id", id)
                .setParameter("semestre", semestre)
                .executeUpdate();
    }

    @Transactional
    public void updateGroupesCM(Long id, Long groupesCM)
    {
        entityManager.createNativeQuery("update UE u set u.groupesCM = :groupesCM where u.id = :id")
                .setParameter("id", id)
                .setParameter("groupesCM", groupesCM)
                .executeUpdate();
    }

    @Transactional
    public void updateGroupesTD(Long id, Long groupesTD)
    {
        entityManager.createNativeQuery("update UE u set u.groupesTD = :groupesTD where u.id = :id")
                .setParameter("id", id)
                .setParameter("groupesTD", groupesTD)
                .executeUpdate();
    }

    @Transactional
    public void updateGroupesTP(Long id, Long groupesTP)
    {
        entityManager.createNativeQuery("update UE u set u.groupesTP = :groupesTP where u.id = :id")
                .setParameter("id", id)
                .setParameter("groupesTP", groupesTP)
                .executeUpdate();
    }

    @Transactional
    public void addUE(UE ue)
    {
        entityManager.persist(ue);
    }

    @Transactional
    public void addEnseignant(Enseignant enseignant)
    {
        entityManager.persist(enseignant);
    }

    @Transactional
    public void init()
    {
        entityManager.createNativeQuery("CREATE TABLE IF NOT EXISTS UE(id bigint generated by default as identity, groupesCM bigint, groupesTD bigint, groupesTP bigint, heuresCM bigint, heuresTD bigint, heuresTP bigint, nom varchar(255), semestre bigint, primary key (id));").executeUpdate();
        entityManager.createNativeQuery("CREATE TABLE IF NOT EXISTS ENSEIGNANT(id bigint generated by default as identity, departement varchar(255), equivalence float not null, heures bigint, nom varchar(255), prenom varchar(255), service varchar(255), primary key (id));").executeUpdate();
        entityManager.createNativeQuery("CREATE TABLE IF NOT EXISTS UE_ENSEIGNANT (UE_ID bigint not null, ENSEIGNANT_ID bigint not null, primary key (UE_ID, ENSEIGNANT_ID));").executeUpdate();

        if (getUEs().size() != 0)
            return;

        entityManager.createNativeQuery("alter table UE_ENSEIGNANT add constraint FK_ENSEIGNANT foreign key (ENSEIGNANT_ID) references ENSEIGNANT;").executeUpdate();
        entityManager.createNativeQuery("alter table UE_ENSEIGNANT add constraint FK_UE foreign key (UE_ID) references UE;").executeUpdate();


        Enseignant enseignant1 = new Enseignant();
        enseignant1.setData("DUONG", "Anh-Kiet-1", 192L, 0.8F, "FST", "chercheur");
        addEnseignant(enseignant1);

        Enseignant enseignant2 = new Enseignant();
        enseignant2.setData("DUONG", "Anh-Kiet-2", 384L, 0.75F, "FST", "enseignant");
        addEnseignant(enseignant2);

        Enseignant enseignant3 = new Enseignant();
        enseignant3.setData("DUONG", "Anh-Kiet-3", 64L, 0.6F, "FST", "doctorant");
        addEnseignant(enseignant3);

        List<Enseignant> enseignants1 = new ArrayList<Enseignant>();
        enseignants1.add(enseignant2);
        enseignants1.add(enseignant3);

        List<Enseignant> enseignants2 = new ArrayList<Enseignant>();
        enseignants2.add(enseignant1);
        enseignants2.add(enseignant3);

        List<Enseignant> enseignants3 = new ArrayList<Enseignant>();
        enseignants3.add(enseignant1);
        enseignants3.add(enseignant2);

        UE ue1 = new UE();
        ue1.setData("M1 Informatique-1", 7L, 100L, 100L, 100L, 150L, 48L, 24L, enseignants1);
        addUE(ue1);

        UE ue2 = new UE();
        ue2.setData("M1 Informatique-2", 7L, 100L, 100L, 100L, 150L, 48L, 24L, enseignants2);
        addUE(ue2);

        UE ue3 = new UE();
        ue3.setData("M1 Informatique-3", 7L, 100L, 100L, 100L, 150L, 48L, 24L, enseignants3);
        addUE(ue3);
    }

}
