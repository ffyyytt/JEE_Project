package com.example;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceUnit;
import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;

@RequestScoped
public class Scolarite {
    @PersistenceUnit
    EntityManager entityManager;

    @Transactional
    public List getUes()
    {
        List<Ue> result = entityManager.createQuery("select u from Ue u").getResultList();
        for (int i = 0; i < result.size(); i++)
        {
            result.get(i).ueEnseignant = entityManager.createQuery("select u.ueEnseignant from Ue u where u.id = :id")
                    .setParameter("id", result.get(i).id).getResultList();
            System.out.println(result.get(i).ueEnseignant);
        }
        return result;
    }

    @Transactional
    public void addEnseignant(Enseignant enseignant)
    {
        entityManager.persist(enseignant);
    }

    @Transactional
    public void addUe(Ue ue)
    {
        entityManager.persist(ue);
    }

    @Transactional
    public void addUeEnseignant(UeEnseignant ueEnseignant)
    {
        entityManager.persist(ueEnseignant);
    }

    @Transactional
    public void init() {
//    create table Enseignant (id bigint generated by default as identity, departement varchar(255), equivalence float not null, heures bigint, nom varchar(255), prenom varchar(255), service varchar(255), primary key (id));
//    create table Ue (id bigint generated by default as identity, groupesCM bigint, groupesTD bigint, groupesTP bigint, heuresCM bigint, heuresTD bigint, heuresTP bigint, nom varchar(255), semestre bigint, primary key (id));
//    create table UeEnseignant (id bigint generated by default as identity, heuresCM bigint, heuresTD bigint, heuresTP bigint, enseignant_id bigint, ue_id bigint, primary key (id));
//    alter table UeEnseignant add constraint enseignant_code foreign key (enseignant_id) references Enseignant;
//    alter table UeEnseignant add constraint ue_id foreign key (ue_id) references Ue;

        entityManager.createNativeQuery("CREATE TABLE IF NOT EXISTS Enseignant (id bigint generated by default as identity, departement varchar(255), equivalence float not null, heures bigint, nom varchar(255), prenom varchar(255), service varchar(255), primary key (id));").executeUpdate();
        entityManager.createNativeQuery("CREATE TABLE IF NOT EXISTS Ue (id bigint generated by default as identity, groupesCM bigint, groupesTD bigint, groupesTP bigint, heuresCM bigint, heuresTD bigint, heuresTP bigint, nom varchar(255), semestre bigint, primary key (id));").executeUpdate();
        entityManager.createNativeQuery("CREATE TABLE IF NOT EXISTS UeEnseignant (id bigint generated by default as identity, heuresCM bigint, heuresTD bigint, heuresTP bigint, enseignant_id bigint, ue_id bigint, primary key (id));").executeUpdate();

        if (getUes().size() != 0)
            return;

        entityManager.createNativeQuery("alter table UeEnseignant add constraint enseignant_code foreign key (enseignant_id) references Enseignant;").executeUpdate();
        entityManager.createNativeQuery("alter table UeEnseignant add constraint ue_id foreign key (ue_id) references Ue;").executeUpdate();

        Enseignant enseignant1 = new Enseignant();
        enseignant1.setData("DUONG", "Anh-Kiet-1", 192L, 0.7F, "FST", "chercheur", null); // CM:90, TD: 60, TP: 42
        addEnseignant(enseignant1);

        Enseignant enseignant2 = new Enseignant();
        enseignant2.setData("DUONG", "Anh-Kiet-2", 384L, 0.7F, "FST", "enseignant", null); // CM: 180, TD: 120, TP: 84
        addEnseignant(enseignant2);

        Enseignant enseignant3 = new Enseignant();
        enseignant3.setData("DUONG", "Anh-Kiet-3", 64L, 0.7F, "FST", "doctorant", null); // CM: 30, TD: 20, TP: 14
        addEnseignant(enseignant3);

        UeEnseignant ue2Enseignants1 = new UeEnseignant();
        ue2Enseignants1.setEnseignant(enseignant1);
        ue2Enseignants1.setData(30L, 20L, 14L);

        UeEnseignant ue3Enseignants1 = new UeEnseignant();
        ue3Enseignants1.setEnseignant(enseignant1);
        ue3Enseignants1.setData(60L, 40L, 28L);

        UeEnseignant ue1Enseignants2 = new UeEnseignant();
        ue1Enseignants2.setEnseignant(enseignant2);
        ue1Enseignants2.setData(120L, 80L, 56L);

        UeEnseignant ue3Enseignants2 = new UeEnseignant();
        ue3Enseignants2.setEnseignant(enseignant2);
        ue3Enseignants2.setData(60L, 40L, 28L);

        UeEnseignant ue1Enseignants3 = new UeEnseignant();
        ue1Enseignants3.setEnseignant(enseignant3);
        ue1Enseignants3.setData(15L, 10L, 7L);

        UeEnseignant ue2Enseignants3 = new UeEnseignant();
        ue2Enseignants3.setEnseignant(enseignant3);
        ue2Enseignants3.setData(15L, 10L, 7L);


        List<UeEnseignant> ue1Enseignants = new ArrayList<>();
        ue1Enseignants.add(ue1Enseignants2);
        ue1Enseignants.add(ue1Enseignants3);

        List<UeEnseignant> ue2Enseignants = new ArrayList<>();
        ue2Enseignants.add(ue2Enseignants1);
        ue2Enseignants.add(ue2Enseignants3);

        List<UeEnseignant> ue3Enseignants = new ArrayList<>();
        ue3Enseignants.add(ue3Enseignants1);
        ue3Enseignants.add(ue3Enseignants2);

        Ue ue1 = new Ue();
        ue1.setData("M1 Informatique-1", 7L, 135L, 90L, 63L, 150L, 48L, 24L, ue1Enseignants);
        addUe(ue1);

        Ue ue2 = new Ue();
        ue2.setData("M1 Informatique-2", 7L, 45L, 30L, 21L, 150L, 48L, 24L, ue2Enseignants);
        addUe(ue2);

        Ue ue3 = new Ue();
        ue3.setData("M1 Informatique-3", 7L, 120L, 80L, 56L, 150L, 48L, 24L, ue3Enseignants);
        addUe(ue3);

        ue1Enseignants2.setUe(ue1);
        addUeEnseignant(ue1Enseignants2);
        ue1Enseignants3.setUe(ue1);
        addUeEnseignant(ue1Enseignants3);

        ue2Enseignants1.setUe(ue2);
        addUeEnseignant(ue2Enseignants1);
        ue2Enseignants3.setUe(ue2);
        addUeEnseignant(ue2Enseignants3);

        ue3Enseignants1.setUe(ue3);
        addUeEnseignant(ue3Enseignants1);
        ue3Enseignants2.setUe(ue3);
        addUeEnseignant(ue3Enseignants2);
    }
}
